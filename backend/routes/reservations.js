import express from "express";
import { supabase } from "../db.js";
import { v4 as uuidv4 } from "uuid";
import QRCode from "qrcode";
import { Resend } from "resend";
import { format } from "date-fns";

const router = express.Router();
const resend = new Resend(process.env.RESEND_API_KEY);


/**
 * V√©rifie le format TVA belge
 * Doit commencer par "BE" et contenir 10 chiffres
 */
function isValidBelgianVAT(tva) {
    if (!tva) return true; // facultatif, donc on accepte vide
    const clean = tva.replace(/\s|\.|-/g, "").toUpperCase();
    return /^BE\d{10}$/.test(clean);
}

/**
 * Fonction d'envoi des emails
 */
async function sendConfirmationEmails({
    email,
    name,
    date,
    heure_id,
    personnes,
    service,
    comment,
    tel,
    societe,
    tva,
}) {
    console.log("üì® Envoi d‚Äôemail en cours pour :", email);

    // Formatage europ√©en de la date
    let formattedDate = date;
    try {
        formattedDate = format(new Date(date), "dd-MM-yyyy");
    } catch (err) {
        console.warn("Erreur formatage date:", err.message);
    }

    // --- Mail client ---
    const htmlClient = `
    <div style="font-family:'Helvetica Neue',Arial,sans-serif;background-color:#f9f9f9;padding:40px 0;color:#333;">
      <div style="max-width:600px;margin:0 auto;background:#b3cdb0;border-radius:12px;box-shadow:0 4px 12px rgba(0,0,0,0.08);overflow:hidden;">
        <div style="background:#b3cdb0;color:#000000;text-align:center;padding:25px;">
          <img src="https://moom.be/assets/imgs/logo/logo-dark.png" alt="Restaurant Moom" style="width:100px;margin-bottom:10px;">
          <h2 style="margin:0;">Confirmation de r√©servation</h2>
        </div>
        <div style="padding:30px;">
          <p>Bonjour <strong>${name}</strong>,</p>
          <p>Nous avons le plaisir de confirmer votre r√©servation au restaurant <strong>Moom</strong>.</p>
          <table style="width:100%;margin:20px 0;border-collapse:collapse;">
            <tr><td><strong>Date</strong></td><td>${formattedDate}</td></tr>
            <tr><td><strong>Heure</strong></td><td>${heure_id}</td></tr>
            <tr><td><strong>Personnes</strong></td><td>${personnes}</td></tr>
            <tr><td><strong>Service</strong></td><td>${service}</td></tr>
          </table>
          ${societe ? `<p><strong>Soci√©t√© :</strong> ${societe}</p>` : ""}
          ${tva ? `<p><strong>TVA :</strong> ${tva}</p>` : ""}
          ${comment ? `<p><em>Remarque :</em> ${comment}</p>` : ""}
          <div style="text-align:center;margin-top:30px;">
            <a href="https://app.moom.be"
              style="display:inline-block;background:#000000;color:#ffffff;padding:12px 24px;border-radius:24px;text-decoration:none;">
              Voir ma r√©servation
            </a>
          </div>
          <p style="margin-top:40px;">√Ä tr√®s bient√¥t,</p>
          <p style="font-weight:bold;">L‚Äô√©quipe du restaurant Moom</p>
        </div>
        <div style="background:#b3cdb0;text-align:center;padding:15px;border-radius:12px;font-size:11px;color:#000000;">
          Restaurant Moom ‚Ä¢ Ossel  |  <a href="mailto:info@moom.be" style="color:#555;">info@moom.be</a>
        </div>
      </div>
    </div>
  `;

  // --- Mail restaurateur ---
  const htmlRestaurant = `
    <div style="font-family:Arial,sans-serif;background:#fff;padding:25px;color:#333;">
      <h2 style="color:#002B5B;">Nouvelle r√©servation re√ßue üçΩÔ∏è</h2>
      <p><strong>Nom :</strong> ${name}</p>
      <p><strong>Email :</strong> ${email}</p>
      <p><strong>T√©l√©phone :</strong> ${tel || "‚Äî"}</p>
      ${societe ? `<p><strong>Soci√©t√© :</strong> ${societe}</p>` : ""}
      ${tva ? `<p><strong>TVA :</strong> ${tva}</p>` : ""}
      <p><strong>Date :</strong> ${formattedDate}</p>
      <p><strong>Heure :</strong> ${heure_id}</p>
      <p><strong>Personnes :</strong> ${personnes}</p>
      <p><strong>Service :</strong> ${service}</p>
      ${comment ? `<p><strong>Remarque :</strong> ${comment}</p>` : ""}
      <hr style="margin:20px 0;">
      <p style="color:#777;">Consultez le dashboard Supabase pour plus de d√©tails.</p>
    </div>
  `;

  try {
    console.log("üì§ Envoi mail client...");
    await resend.emails.send({
      from: "Restaurant Moom <no-reply@moom.be>",
      to: [email],
      subject: "‚úÖ Confirmation de votre r√©servation - Moom",
      html: htmlClient,
    });

    console.log("üì§ Envoi mail restaurant...");
    await resend.emails.send({
      from: "Restaurant Moom <no-reply@moom.be>",
      to: ["business@moom.be"],
      subject: `üì• Nouvelle r√©servation - ${name}`,
      html: htmlRestaurant,
    });

    console.log("‚úÖ Mails envoy√©s avec succ√®s !");
  } catch (err) {
    console.error("üì© Erreur lors de l‚Äôenvoi d‚Äôe-mails :", err);
    throw new Error("√âchec d‚Äôenvoi d‚Äôe-mails via Resend");
  }
}

/**
 *  ROUTE POST ‚Äî Cr√©ation de r√©servation (version s√©curis√©e)
 */
router.post("/", async (req, res) => {
  try {
    console.log("üì¨ Nouvelle requ√™te re√ßue sur /api/reservations !");
    console.log("üß† Corps re√ßu :", req.body);

    const {
      prenom,
      nom,
      email,
      date,
      heure_id,
      personnes,
      service,
      comment,
      remarque,
      tel,
      societe,
      tva,
    } = req.body;

    // Normalisation des champs
    const normalizedComment =
      (comment && comment.trim()) || (remarque && remarque.trim()) || "";
    const normalizedService =
      service && service.toLowerCase() === "diner" ? "dinner" : service;
    const name = `${prenom || ""} ${nom || ""}`.trim();

    // üßæ V√©rification TVA (facultative)
    if (tva && !isValidBelgianVAT(tva)) {
      console.warn("‚ö†Ô∏è TVA invalide :", tva);
      return res
        .status(400)
        .json({ success: false, message: "Num√©ro de TVA invalide (ex: BE0123456789)" });
    }

    // üïí V√©rification champs requis
    if (!email || !date || !heure_id) {
      console.warn("‚ö†Ô∏è Champs manquants :", { email, date, heure_id });
      return res
        .status(400)
        .json({ success: false, message: "Champs requis manquants" });
    }

    // üß© G√©n√©ration QR Code
    const formattedDate = format(new Date(date), "dd-MM-yyyy");
    const id = uuidv4();
    const qrData = `R√©servation #${id} - ${name} - ${formattedDate}`;
    const qrCodeBase64 = await QRCode.toDataURL(qrData);

    console.log("üßæ Tentative insertion Supabase‚Ä¶");

    // ‚úÖ Insertion dans la table "reservations"
    const { error: insertError } = await supabase.from("reservations").insert([
      {
        id,
        name,
        email,
        date,
        heure_id,
        personnes,
        service: normalizedService,
        comment: normalizedComment,
        tel,
        societe,
        tva,
        qrcode: qrCodeBase64,
      },
    ]);

    if (insertError) {
      console.error("‚ùå Erreur insertion Supabase :", insertError.message);
      return res.status(500).json({
        success: false,
        error: insertError.message,
      });
    }

    // ‚úÖ R√©cup√©ration de l‚Äôheure associ√©e
    let heure = "‚Äî";
    try {
      const { data: heureData, error: heureError } = await supabase
        .from("heure")
        .select("horaire")
        .eq("id", heure_id)
        .maybeSingle();

      if (heureError) console.warn("‚ö†Ô∏è Erreur r√©cup√©ration heure :", heureError.message);
      heure = heureData?.horaire || "‚Äî";
    } catch (err) {
      console.warn("‚ö†Ô∏è Impossible de r√©cup√©rer l‚Äôheure :", err.message);
    }

    // ‚úâÔ∏è Envoi d‚Äôemail (s√©curis√©, non bloquant)
    try {
      console.log("üöÄ Envoi d‚Äôemail √†", email);
      await sendConfirmationEmails({
        email,
        name,
        date,
        heure,
        personnes,
        service: normalizedService,
        tel,
        societe,
        tva,
      });
    } catch (mailError) {
      console.warn("‚ö†Ô∏è Erreur d‚Äôenvoi email :", mailError.message);
    }

    res.status(201).json({
      success: true,
      message: "R√©servation enregistr√©e avec succ√®s ‚úÖ",
      qrCode: qrCodeBase64,
    });
  } catch (err) {
    console.error("üí• Erreur interne /api/reservations :", err);
    res.status(500).json({
      success: false,
      error: err.message || "Erreur serveur inconnue",
    });
  }
});

/**
 * üßæ ROUTE GET ‚Äî Liste des r√©servations
 */
router.get("/", async (req, res) => {
  try {
    const { data, error } = await supabase.from("reservations").select("*");
    if (error) throw error;
    res.json(data);
  } catch (err) {
    console.error("‚ùå Erreur GET /api/reservations :", err.message);
    res.status(500).json({ error: err.message });
  }
});

export default router;